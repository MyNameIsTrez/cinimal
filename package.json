{
  "name": "cinimal",
  "displayName": "cinimal",
  "description": "Edit C files through the lens of Python-like syntax.",
  "version": "0.4.0",
  "repository": {
    "url": "https://github.com/MyNameIsTrez/cinimal"
  },
  "icon": "./vsicons-custom-icons/file_type_cn.png",
  "publisher": "MyNameIsTrez",
  "engines": {
    "vscode": "^1.78.0"
  },
  "categories": [
    "Programming Languages"
  ],
  "activationEvents": [],
  "main": "./out/extension.js",
  "contributes": {
    "languages": [
      {
        "id": "cinimal",
        "aliases": [
          "cinimal"
        ],
        "extensions": [
          ".cn"
        ],
        "configuration": "./language-configuration.json"
      }
    ],
    "grammars": [
      {
        "language": "cinimal",
        "scopeName": "source.cn",
        "path": "./syntaxes/cinimal.tmLanguage.json"
      }
    ],
    "configuration": [
      {
        "title": "cinimal",
        "properties": {
          "cinimal.pythonIndentation": {
            "type": "boolean",
            "markdownDescription": "Turn C-style `{` `}` indentation into Python-like tab indentation",
            "default": true,
            "order": 0
          },
          "cinimal.removeTrailingSemicolons": {
            "type": "boolean",
            "markdownDescription": "Turn `n += 2; N *= 3;` into `n += 2; n *= 3`",
            "default": true,
            "order": 1
          },
          "cinimal.oneInstructionPerLine": {
            "type": "boolean",
            "markdownDescription": "Turn `n += 2; n *= 3;` into `n += 2` with `n *= 3` on the next line",
            "default": true,
            "order": 2
          },
          "cinimal.removeParentheses": {
            "type": "boolean",
            "markdownDescription": "Turn `while (i < 3)` into `while i < 3`\n\nThe same goes for `for`, `if`, and `elif`",
            "default": true,
            "order": 3
          },
          "cinimal.removeRedundantReturnParentheses": {
            "type": "boolean",
            "markdownDescription": "Turn `return (i);` into `return i`\n\nThis setting is specifically for schools from the 42 Network, where these parentheses are mandatory",
            "default": true,
            "order": 4
          },
          "cinimal.hashtagComment": {
            "type": "boolean",
            "markdownDescription": "Turn `// foo` into `# foo`, and turn `/* bar` with `baz */` on the next line into `# bar` with `# baz` on the next line",
            "default": true,
            "order": 5
          },
          "cinimal.printfToPrint": {
            "type": "boolean",
            "markdownDescription": "Turn `printf(\"%d\\n\", 42);` into `print(\"%d\", 42)`",
            "default": true,
            "order": 6
          },
          "cinimal.dereferenceOnRight": {
            "type": "boolean",
            "markdownDescription": "Turn `(*nbr_ptr)++;` into `nbr_ptr*++`",
            "default": true,
            "order": 7
          },
          "cinimal.noArrowOperator": {
            "type": "boolean",
            "markdownDescription": "Turn `person->age = 42;` into `person*.age = 42`\n\n**Note:** This setting has no effect when `#cinimal.dereferenceOnRight#` is off",
            "default": true,
            "order": 8
          },
          "cinimal.explicitTypeSize": {
            "type": "boolean",
            "markdownDescription": "Turn `int n;` into `i32 n` on systems where an `int` is 32 bits.\n\n`float` is always 32 bits, but is also turned into `f32`",
            "default": true,
            "order": 9
          },
          "cinimal.separateDeclarationAndAssignment": {
            "type": "boolean",
            "markdownDescription": "Turn `int n = 42;` into `int n` with `n = 42` on the next line",
            "default": true,
            "order": 10
          },
          "cinimal.ptrKeyword": {
            "type": "boolean",
            "markdownDescription": "Turn `int *n;` into `int ptr n`",
            "default": true,
            "order": 11
          },
          "cinimal.leftToRightTypeDeclaration": {
            "type": "boolean",
            "markdownDescription": "Turn `int const * const * * n;` into `ptr ptr const ptr const int n`",
            "default": true,
            "order": 12
          },
          "cinimal.staticByDefaultPubOtherwise": {
            "type": "boolean",
            "markdownDescription": "Turn `static void foo(void)` into `void foo(void)` and `void bar(void)` into `pub void bar(void)`",
            "default": true,
            "order": 13
          },
          "cinimal.constByDefaultMutOtherwise": {
            "type": "boolean",
            "markdownDescription": "Turn `void foo(const int a, int b)` into `void foo(int a, mut int b)`",
            "default": true,
            "order": 14
          },
          "cinimal.namespacedEnums": {
            "type": "boolean",
            "markdownDescription": "Turn `type == cat` into `type == animal::cat`, given `enum animal { cat, dog };`",
            "default": true,
            "order": 15
          },
          "cinimal.nullptr": {
            "type": "boolean",
            "markdownDescription": "Turn `if (foo == NULL)` into `if (foo == nullptr)`",
            "default": true,
            "order": 16
          },
          "cinimal.imports": {
            "type": "boolean",
            "markdownDescription": "Turn `#include <assert.h>` into `import { assert } from <assert.h>`",
            "default": true,
            "order": 17
          }
        }
      }
    ],
    "commands": [
      {
        "command": "cinimal.toggle",
        "title": "Toggle cinimal on/off"
      },
      {
        "command": "cinimal.helloWorld",
        "title": "Hello World"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/glob": "^8.1.0",
    "@types/mocha": "^10.0.1",
    "@types/node": "16.x",
    "@types/vscode": "^1.78.0",
    "@typescript-eslint/eslint-plugin": "^5.59.1",
    "@typescript-eslint/parser": "^5.59.1",
    "@vscode/test-electron": "^2.3.0",
    "electron-rebuild": "^3.2.9",
    "eslint": "^8.39.0",
    "glob": "^8.1.0",
    "mocha": "^10.2.0",
    "typescript": "^5.0.4"
  },
  "dependencies": {
    "electron": "^22.3.5",
    "tree-sitter": "^0.20.1",
    "tree-sitter-c": "^0.20.2"
  }
}
