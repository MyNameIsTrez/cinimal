import { bark, get_paw_count } from "animals/dog.h"

import { assert } from <assert.h>
import { f64, i32 } from <stdint.h>
import { print } from <stdio.h>
import { calloc, free } from <stdlib.h>

struct Names
	first_name: char *
	last_name: char *

typedef enum Country Country
	UKRAINE
	MEXICO

typedef struct Person
	age: f64
	names: struct Names
	country: Country

typedef enum Type
	INTEGER
	REAL

typedef struct Value
	type: Type
	union
		integer: i32
		real: f64

pri value_new_integer(integer: i32): Value
	v: mut Value
	v.type = INTEGER
	v.integer = integer
	return v

pri allocate_one_person(): ptr thing
	return calloc(1, Person)

pri add(n: ptr mut i32): void
	n*++

pub main(): i32
	# single line comment
	# multi
	# line comment
	i: mut i32
	i = 0

	while i < 3
		if i == 0
			print("foo")
		elif (i == 1)
			print("bar")
		else
			print("baz")
		i++

	assert(i == 3)
	add(&i)
	assert(i == 4)

	bark()
	assert(get_paw_count() == 4)

	assert(MEXICO == 1)

	people: mut ptr mut Person
	people = calloc(2, Person)

	frank: ptr mut Person
	frank = &people[0]
	frank*.age = 24 * 1.5
	assert(people[0].age == 36)
	frank*.names.last_name = "frank"
	assert(people[0].names.last_name == "frank")

	assert(people[1].names.last_name == nullptr);

	people[1].country = MEXICO
	assert(people[1].country != UKRAINE)

	free(people)
	people = allocate_one_person()
	people[0].age = 42
	assert(people[0].age == 42)

	free(people)
	people = nullptr

	friends: arr[2][3] mut Person
	friends = 0
	friends[0][2].age = 13
	assert(friends[0][2].age == 13)

    v: mut Value
    v.integer = 42
    assert(v.integer == 42)
    v.real = 1337
    assert(v.real == 1337)

	return 0
