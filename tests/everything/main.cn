import { bark, get_paw_count } from "animals/dog.h"

import { assert } from <assert.h>
import { f64, i32 } from <stdint.h>
import { print } from <stdio.h>
import { calloc, free } from <stdlib.h>

enum Type
	INTEGER
	STRING

struct typedef Value
	type: enum Type
	union
		integer: i32
		string: ptr char

allocate_one_value(): ptr thing
	return calloc(1, Value)

add(n: ptr mut i32)
	n*++

pub main(): i32
	# single line comment
	# multiline
	# comment
	i: mut i32
	i = 0

	while i < 3
		if i == 0
			print("foo")
		elif (i == 1)
			print("bar")
		else
			print("baz")
		i++

	assert(i == 3)
	add(&i)
	assert(i == 4)

	j: mut i32
	for j = 0; j < 2; j++
		# Prints 0, 1
		print("%d", j)

	bark()
	assert(get_paw_count() == 4)

	assert(STRING == 1)

	values: mut ptr mut Value
	values = calloc(2, Value)

	v0: ptr mut Value
	v0 = &values[0]
	v0.type = STRING
	assert(values[0].type == STRING)
	assert(v0.string == nullptr)
	v0.string = "frank"
	assert(values[0].string == "frank")

	values[1].type = STRING
	assert(values[1].type != INTEGER)

	free(values)
	values = allocate_one_value()
	values[0].integer = 42
	assert(values[0].integer == 42)
	free(values)

	Value matrix[2][3] = {0}
	matrix[0][2].integer = 13
	assert(matrix[0][2].integer == 13)

	return 0
