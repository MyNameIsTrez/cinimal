import deque_at, deque_back, deque_delete, deque_front, deque_new, deque_pop_back, deque_pop_front, deque_push_back, deque_push_front, deque_reserve, deque_set from "deque.h"

import f64, i32 from <stdint.h>
import calloc, free from <stdlib.h>
import memcpy from <string.h>

pub deque_new(type_size i32) Deque
	deque mut Deque
	deque = {}
	deque.elements = calloc(1, type_size)
	deque.type_size = type_size
	deque.capacity = 1

	return deque

pub deque_reserve(deque ptr mut Deque, new_capacity i32)
	if deque.size == deque.capacity
		new_elements ptr mut u8
		new_elements = calloc(new_capacity, deque.type_size)

		on_right mut i32
		if (deque.start_index > 0)
			# An example deque is [B,C, ,A], where the start_index is 3
			on_right = deque.capacity - deque.start_index
		else
			# An example deque is [A, , , ], where the start_index is 0
			on_right = 0

		# Copies everything to the right of the unused elements
		memcpy(
			new_elements,
			deque.elements + deque.start_index * deque.type_size,
			on_right * deque.type_size
		)

		# Copies everything to the left of the unused elements
		memcpy(
			new_elements + on_right * deque.type_size,
			deque.elements,
			(deque.size - on_right) * deque.type_size
		)

		free(deque.elements)
		deque.elements = new_elements

		deque.start_index = 0
		deque.capacity = new_capacity

modulo(a i32, b i32) i32
	# TODO: Can be done more efficiently
	return ((a % b) + b) % b

pub deque_set(deque ptr mut Deque, element ptr thing, index i32)
	memcpy(deque.elements + index * deque.type_size, element, deque.type_size)

pub deque_push_front(deque ptr mut Deque, element ptr thing)
	if deque.size == deque.capacity
		deque_reserve(deque, deque.capacity * 2)

	deque.start_index = modulo(deque.start_index - 1, deque.capacity)
	deque_set(deque, element, deque.start_index)

	deque.size++

pub deque_push_back(deque ptr mut Deque, element ptr thing)
	if deque.size == deque.capacity
		deque_reserve(deque, deque.capacity * 2)

	index i32
	index = (deque.start_index + deque.size) % deque.capacity
	deque_set(deque, element, index)

	deque.size++

pub deque_front(deque ptr mut Deque) ptr thing
	return deque.elements + deque.start_index * deque.type_size

pub deque_back(deque ptr mut Deque) ptr thing
	# TODO: Does this handle size=0 properly?
	index i32
	index = (deque.start_index + deque.size - 1) % deque.capacity
	return deque.elements + index * deque.type_size

pub deque_pop_front(deque ptr mut Deque)
	deque.start_index = (deque.start_index + 1) % deque.capacity
	deque.size--

pub deque_pop_back(deque ptr mut Deque)
	deque.size--

pub deque_at(deque ptr Deque, index i32) ptr thing
	return deque.elements + index * deque.type_size

pub deque_delete(deque ptr mut Deque)
	free(deque.elements)
