struct Student
	f64 age

struct DequeStudent
	Student[] data
	i32 start_index
	i32 size

i32 main()
	# TODO: Make sure this is 0-initialized when transpiled to C++!
	DequeStudent deque

	Student alice
	alice.age = 10
	DequeStudent::push_back(deque, alice)

	Student bob
	bob.age = 11
	DequeStudent::push_back(deque, bob)

	Student charles
	charles.age = 9
	DequeStudent::push_front(deque, charles)

	assert(DequeStudent::at(deque, 0).age == 9)
	assert(DequeStudent::at(deque, 1).age == 10)
	assert(DequeStudent::at(deque, 2).age == 11)

	assert(DequeStudent::pop_front(deque).age == 9)
	assert(DequeStudent::pop_back(deque).age == 11)

void push_front(ref DequeStudent deque, Student student)
	_try_grow(deque.data)

void _try_grow(ref Student[] data)
	if data.size() >= data.capacity()
		# TODO: How can I can set values at arbitrary indices with data.at()? Prefill data with 0s?
		# TODO: Maybe for the best if I just always use deq instead of vec?
		# TODO: I could always later on replace deq with my own circular buffer.
		# Student[] new_data

		# while i < data.size()
		# 	new_data.push(data[i])
		# 	i += 1

		# data.reserve(data.capacity() * 2)

void push_back(ref DequeStudent deque, Student student)

ref Student pop_front(ref DequeStudent deque)

ref Student pop_back(ref DequeStudent deque)

ref Student at(ref DequeStudent deque, index)
